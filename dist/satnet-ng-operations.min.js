/*! satnet-ng 28-06-2015 rtubiopa@calpoly.edu Apache-2.0*/
angular.module("splashDirective",[]).directive("mAppLoading",["$animate",function(a){"use strict";var b=function(b,c,d){a.leave(c.children().eq(1)).then(function(){c.remove(),b=c=d=null})};return{link:b,restrict:"C"}}]),angular.module("snAboutDirective",["ngMaterial"]).controller("snAboutDlgCtrl",["$scope","$mdDialog",function(a,b){a.closeDialog=function(){b.hide()}}]).controller("snAboutCtrl",["$scope","$mdDialog",function(a,b){a.openSnAbout=function(){b.show({templateUrl:"common/templates/sn-about-dialog.html"})}}]).directive("snAbout",function(){return{restrict:"E",templateUrl:"common/templates/sn-about.html"}}),angular.module("snMapDirective",["snMapServices","snMarkerServices","GroundStationModels","snNetworkModels"]).controller("MapCtrl",["$log","$scope","mapServices","markers","gsModels","serverModels","ZOOM",function(a,b,c,d,e,f,g){b.defaults={zoomControlPosition:"bottomright"},b.center={zoom:g},b.markers={},b.layers={baselayers:{},overlays:{}},b.init=function(){b.map=d.configureMapScope(b),c.autocenterMap(b,g),e.initListeners(),f.initStandalone().then(function(b){a.log("[map-controller] Server ="+JSON.stringify(b)),e.initAll().then(function(b){a.log("[map-controller] Ground Station(s) = "+JSON.stringify(b))})})}}]).directive("snMap",function(){return{restrict:"E",templateUrl:"common/templates/sn-map.html"}}),angular.module("broadcaster",["pushServices"]).service("broadcaster",["$rootScope","$log","satnetPush",function(a,b,c){"use strict";this.GS_ADDED_EVENT="gs.added",this.GS_REMOVED_EVENT="gs.removed",this.GS_UPDATED_EVENT="gs.updated",this.GS_AVAILABLE_ADDED_EVENT="gs.available.added",this.GS_AVAILABLE_REMOVED_EVENT="gs.available.removed",this.GS_AVAILABLE_UPDATED_EVENT="gs.available.updated",this.PASSES_UPDATED="passes.updated",this.LEOP_GSS_UPDATED_EVENT="leop.gss.updated",this.LEOP_GS_ASSIGNED_EVENT="leop.gs.assigned",this.LEOP_GS_RELEASED_EVENT="leop.gs.released",this.LEOP_UPDATED_EVENT="leop.updated",this.LEOP_FRAME_RX_EVENT="leop.frame.rx",this.KEEP_ALIVE_EVENT="KEEP_ALIVE",this.gsAvailableAddedInternal=function(b){a.$broadcast("gs.available.added",b)},this.gsAdded=function(b){a.$broadcast(this.GS_ADDED_EVENT,b)},this.gsRemoved=function(b){a.$broadcast(this.GS_REMOVED_EVENT,b)},this.gsUpdated=function(b){a.$broadcast(this.GS_UPDATED_EVENT,b)},this.SC_ADDED_EVENT="sc.added",this.SC_REMOVED_EVENT="sc.removed",this.SC_UPDATED_EVENT="sc.updated",this.scAdded=function(b){a.$broadcast(this.SC_ADDED_EVENT,b)},this.scRemoved=function(b){a.$broadcast(this.SC_REMOVED_EVENT,b)},this.scUpdated=function(b){a.$broadcast(this.SC_UPDATED_EVENT,b)},this.gsAvailableAdded=function(b){a.$broadcast("gs.available.added",b.identifier)},this.gsAvailableRemoved=function(b){a.$broadcast("gs.available.removed",b.identifier),a.$broadcast("passes.updated",{})},this.gsAvailableUpdated=function(b){a.$broadcast("gs.available.updated",b.identifier),a.$broadcast("passes.updated",{})},this.passesUpdated=function(){a.$broadcast("passes.updated",{})},this.scGtUpdated=function(b){a.$broadcast("sc.updated",b.identifier)},this.leopGssUpdated=function(b){a.leop_id===b.identifier&&a.$broadcast("leop.gss.updated",b)},this.leopGsAssigned=function(b){a.leop_id===b.launch_id&&a.$broadcast("leop.gs.assigned",b.groundstation_id)},this.leopGsReleased=function(b){a.leop_id===b.launch_id&&a.$broadcast("leop.gs.released",b.groundstation_id)},this.leopUpdated=function(b){a.leop_id===b.identifier&&a.$broadcast("leop.updated",b)},this.leopUfoIdentified=function(b){a.leop_id===b.launch_id&&(a.$broadcast("sc.added",b.spacecraft_id),a.$broadcast("passes.updated",{}))},this.leopUfoUpdated=function(b){a.leop_id===b.launch_id&&(a.$broadcast("sc.updated",b.spacecraft_id),a.$broadcast("passes.updated",{}))},this.leopUfoForgot=function(b){a.leop_id===b.launch_id&&(a.$broadcast("sc.removed",b.spacecraft_id),a.$broadcast("passes.updated",{}))},this.leopSCUpdated=function(b){a.leop_id===b.launch_id&&(a.$broadcast("sc.updated",b.launch_sc_id),a.$broadcast("passes.updated",{}))},this.leopFrameReceived=function(b){a.$broadcast("leop.frame.rx",b.frame)},this.keepAliveReceived=function(c){a.$broadcast("KEEP_ALIVE",{}),console.log("ALIVE! data = "+JSON.stringify(c)),b.log("alive")},c.bind(c.EVENTS_CHANNEL,c.GS_ADDED_EVENT,this.gsAvailableAdded,this),c.bind(c.EVENTS_CHANNEL,c.GS_REMOVED_EVENT,this.gsAvailableRemoved,this),c.bind(c.EVENTS_CHANNEL,c.GS_UPDATED_EVENT,this.gsAvailableUpdated,this),c.bind(c.SIMULATION_CHANNEL,c.PASSES_UPDATED_EVENT,this.passesUpdated,this),c.bind(c.SIMULATION_CHANNEL,c.GT_UPDATED_EVENT,this.scGtUpdated,this),c.bind(c.LEOP_CHANNEL,c.LEOP_UPDATED_EVENT,this.leopUpdated,this),c.bind(c.LEOP_CHANNEL,c.LEOP_GSS_UPDATED_EVENT,this.leopGssUpdated,this),c.bind(c.LEOP_CHANNEL,c.LEOP_GS_ASSIGNED_EVENT,this.leopGsAssigned,this),c.bind(c.LEOP_CHANNEL,c.LEOP_GS_RELEASED_EVENT,this.leopGsReleased,this),c.bind(c.LEOP_CHANNEL,c.LEOP_UFO_IDENTIFIED_EVENT,this.leopUfoIdentified,this),c.bind(c.LEOP_CHANNEL,c.LEOP_UFO_UPDATED_EVENT,this.leopUfoUpdated,this),c.bind(c.LEOP_CHANNEL,c.LEOP_UFO_FORGOTTEN_EVENT,this.leopUfoForgot,this),c.bind(c.LEOP_CHANNEL,c.LEOP_SC_UPDATED_EVENT,this.leopSCUpdated,this),c.bind(c.LEOP_DOWNLINK_CHANNEL,c.FRAME_EVENT,this.leopFrameReceived,this),c.bind(c.NETWORK_EVENTS_CHANNEL,c.KEEP_ALIVE,this.keepAliveReceived,this)}]),angular.module("snMapServices",["satnetServices","leaflet-directive"]).constant("T_OPACITY",.125).constant("LAT",37.7833).constant("LNG",-122.4167).constant("MIN_ZOOM",2).constant("MAX_ZOOM",12).constant("ZOOM",7).constant("ZOOM_SELECT",10).service("mapServices",["$q","leafletData","satnetRPC","MIN_ZOOM","MAX_ZOOM","ZOOM","T_OPACITY","ZOOM_SELECT",function(a,b,c,d,e,f,g){"use strict";this.getMainMap=function(){return b.getMap("mainMap").then(function(a){return{map:a}})},this._updateTerminator=function(a){var b=L.terminator();return a.setLatLngs(b.getLatLngs()),a.redraw(),a},this.createTerminatorMap=function(){var a=this._updateTerminator;return this.getMainMap().then(function(b){var c=L.terminator({fillOpacity:g});return c.addTo(b.map),b.terminator=c,setInterval(function(){a(c)},500),b})},this.autocenterMap=function(a,b){var d=this;return c.getUserLocation().then(function(c){d.configureMap(a,c.latitude,c.longitude,b)})},this.centerAtGs=function(a,b,d){var e=this;return c.rCall("gs.get",[b]).then(function(b){return e.configureMap(a,b.groundstation_latlon[0],b.groundstation_latlon[1],d),b})},this.configureMap=function(a,b,c,d){a.center={lat:b,lng:c,zoom:d},a.markers={gs:{lat:b,lng:c,focus:!1,draggable:!1,message:"Estimated Location",icon:{iconUrl:"/images/user.png",iconSize:[15,15]}}},a.layers.baselayers=this.getBaseLayers(),a.layers.overlays=this.getOverlays()},this.getBaseLayers=function(){return{esri_baselayer:{name:"ESRI Base Layer",type:"xyz",url:"https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}",layerOptions:{noWrap:!1,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:"Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ"}},osm_baselayer:{name:"OSM Base Layer",type:"xyz",url:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",layerOptions:{noWrap:!1,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}}}},this.getESRIBaseLayer=function(){return{esri_baselayer:{name:"ESRI Base Layer",type:"xyz",url:"https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}",layerOptions:{noWrap:!1,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:"Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ"}}}},this.getOSMBaseLayer=function(){return{osm_baselayer:{name:"OSM Base Layer",type:"xyz",url:"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}}}},this.getOverlays=function(){return{oms_admin_overlay:{name:"Administrative Boundaries",type:"xyz",url:"http://openmapsurfer.uni-hd.de/tiles/adminb/x={x}&y={y}&z={z}",visible:!0,layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}},hydda_roads_labels_overlay:{name:"Roads and Labels",type:"xyz",url:"http://{s}.tile.openstreetmap.se/hydda/roads_and_labels/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'Tiles courtesy of <a href="http://openstreetmap.se/" target="_blank">OpenStreetMap Sweden</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}},stamen_toner_labels_overlay:{name:"Labels",type:"xyz",url:"http://{s}.tile.stamen.com/toner-labels/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,subdomains:"abcd",attribution:'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'}},owm_rain_overlay:{name:"Rain",type:"xyz",url:"http://{s}.tile.openweathermap.org/map/rain/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,opacity:.325,attribution:'Map data &copy; <a href="http://openweathermap.org">OpenWeatherMap</a>'}},owm_temperature_overlay:{name:"Temperature",type:"xyz",url:"http://{s}.tile.openweathermap.org/map/temp/{z}/{x}/{y}.png",layerOptions:{noWrap:!0,continuousWorld:!1,minZoom:d,maxZoom:e,attribution:'Map data &copy; <a href="http://openweathermap.org">OpenWeatherMap</a>'}}}},this.asString=function(a){return'mapInfo = {"center": '+JSON.stringify(a.center)+', "terminator": '+a.terminator+', "map": '+a.map+"}"}}]),angular.module("satnetServices",["jsonrpc","ngCookies"]).run(["$http","$cookies",function(a,b){a.defaults.headers.post["X-CSRFToken"]=b.csrftoken}]).constant("TEST_PORT",8e3).service("satnetRPC",["jsonrpc","$location","$log","$q","$http","TEST_PORT",function(a,b,c,d,e,f){"use strict";this._getSatNetAddress=function(){var a=b.protocol(),c=b.host(),d=b.port();return"localhost"===c&&(d=f),""+a+"://"+c+":"+d},this._getRPCAddress=function(){return this._getSatNetAddress()+"/jrpc/"};var g=this._getRPCAddress();this._configuration=a.newService("configuration",g),this._simulation=a.newService("simulation",g),this._leop=a.newService("leop",g),this._network=a.newService("network",g),this._services={"gs.list":this._configuration.createMethod("gs.list"),"gs.add":this._configuration.createMethod("gs.create"),"gs.get":this._configuration.createMethod("gs.getConfiguration"),"gs.update":this._configuration.createMethod("gs.setConfiguration"),"gs.delete":this._configuration.createMethod("gs.delete"),"sc.list":this._configuration.createMethod("sc.list"),"sc.add":this._configuration.createMethod("sc.create"),"sc.get":this._configuration.createMethod("sc.getConfiguration"),"sc.update":this._configuration.createMethod("sc.setConfiguration"),"sc.delete":this._configuration.createMethod("sc.delete"),"user.getLocation":this._configuration.createMethod("user.getLocation"),"tle.celestrak.getSections":this._configuration.createMethod("tle.celestrak.getSections"),"tle.celestrak.getResource":this._configuration.createMethod("tle.celestrak.getResource"),"tle.celestrak.getTle":this._configuration.createMethod("tle.celestrak.getTle"),"sc.getGroundtrack":this._simulation.createMethod("spacecraft.getGroundtrack"),"sc.getPasses":this._simulation.createMethod("spacecraft.getPasses"),"gs.getPasses":this._simulation.createMethod("groundstation.getPasses"),"leop.getCfg":this._leop.createMethod("getConfiguration"),"leop.setCfg":this._leop.createMethod("setConfiguration"),"leop.getPasses":this._leop.createMethod("getPasses"),"leop.gs.list":this._leop.createMethod("gs.list"),"leop.sc.list":this._leop.createMethod("sc.list"),"leop.gs.add":this._leop.createMethod("gs.add"),"leop.gs.remove":this._leop.createMethod("gs.remove"),"leop.ufo.add":this._leop.createMethod("launch.addUnknown"),"leop.ufo.remove":this._leop.createMethod("launch.removeUnknown"),"leop.ufo.identify":this._leop.createMethod("launch.identify"),"leop.ufo.forget":this._leop.createMethod("launch.forget"),"leop.ufo.update":this._leop.createMethod("launch.update"),"leop.getMessages":this._leop.createMethod("getMessages"),"net.alive":this._network.createMethod("keepAlive"),"net.geoip":this._network.createMethod("geoip")},this._generateError=function(a,b,d,e){var f="[satnetRPC] Error invoking = <"+a+">, with params = <"+JSON.stringify(b)+">, code = <"+JSON.stringify(d)+">, description = <"+JSON.stringify(e)+">";throw c.warn(f),f},this.rCall=function(a,b){var d=this._generateError;if(this._services.hasOwnProperty(a)===!1)throw"[satnetRPC] service not found, id = <"+a+">";return c.info("[satnetRPC] Invoked service = <"+a+">, params = "+JSON.stringify(b)),this._services[a](b).then(function(e){return"JSONRPCError"===e.data.name&&d(a,b,e.code,e.message),c.info("[satnetRPC] Invoked service = <"+a+">, params = <"+JSON.stringify(b)+">, , result = <"+JSON.stringify(e)),e.data},function(c){d(a,b,"NONE",c)})},this.getUserLocation=function(){var a=this._getSatNetAddress()+"/configuration/user/geoip";return e.get(a).then(function(a){return c.info("[satnet] user@("+JSON.stringify(a.data)+")"),{latitude:parseFloat(a.data.latitude),longitude:parseFloat(a.data.longitude)}})},this.getServerLocation=function(a){return this.rCall("net.geoip",[a]).then(function(a){return a})},this.readSCCfg=function(a){var b={},c=[this.rCall("sc.get",[a]),this.rCall("sc.getGroundtrack",[a]),this.rCall("tle.celestrak.getTle",[a])];return d.all(c).then(function(a){return b=a[0],b.groundtrack=a[1],b.tle=a[2],angular.extend(b,a[0]),angular.extend(b.groundtrack,a[1]),angular.extend(b.tle,a[2]),b})},this.readAllLEOPGS=function(a){var b=this;return this.rCall("leop.gs.list",[a]).then(function(a){var c=[];return angular.forEach(a.leop_gs_available,function(a){c.push(b.rCall("gs.get",[a]))}),angular.forEach(a.leop_gs_inuse,function(a){c.push(b.rCall("gs.get",[a]))}),d.all(c).then(function(b){var c,d,e,f=[],g=[];for(c=0;c<b.length;c+=1)d=b[c],e=d.groundstation_id,a.leop_gs_available.indexOf(e)>=0?f.push(d):g.push(d);return{leop_gs_available:f,leop_gs_inuse:g}})})}}]),angular.module("pushServices",["pusher-angular"]).service("satnetPush",["$log","$pusher",function(a,b){"use strict";this._API_KEY="79bee37791b6c60f3e56",this._client=null,this._service=null,this.LEOP_DOWNLINK_CHANNEL="leop.downlink.ch",this.EVENTS_CHANNEL="configuration.events.ch",this.NETWORK_EVENTS_CHANNEL="network.events.ch",this.SIMULATION_CHANNEL="simulation.events.ch",this.LEOP_CHANNEL="leop.events.ch",this.KEEP_ALIVE="keep_alive",this.FRAME_EVENT="frameEv",this.GS_ADDED_EVENT="gsAddedEv",this.GS_REMOVED_EVENT="gsRemovedEv",this.GS_UPDATED_EVENT="gsUpdatedEv",this.PASSES_UPDATED_EVENT="passesUpdatedEv",this.GT_UPDATED_EVENT="groundtrackUpdatedEv",this.LEOP_GSS_UPDATED_EVENT="leopGSsUpdatedEv",this.LEOP_GS_ASSIGNED_EVENT="leopGSAssignedEv",this.LEOP_GS_RELEASED_EVENT="leopGSReleasedEv",this.LEOP_UPDATED_EVENT="leopUpdatedEv",this.LEOP_UFO_IDENTIFIED_EVENT="leopUFOIdentifiedEv",this.LEOP_UFO_FORGOTTEN_EVENT="leopUFOForgottenEv",this.LEOP_SC_UPDATED_EVENT="leopSCUpdatedEv",this._channel_names=[this.LEOP_DOWNLINK_CHANNEL,this.EVENTS_CHANNEL,this.SIMULATION_CHANNEL,this.NETWORK_EVENTS_CHANNEL,this.LEOP_CHANNEL],this._initData=function(){this._client=new Pusher(this._API_KEY,{encrypted:!0}),this._service=b(this._client),this._service.connection.bind("state_change",this._logConnection),a.info("[push] pusher.com service initialized!"),this._subscribeChannels()},this._logConnection=function(b){a.warn("[push] State connection change, states = "+JSON.stringify(b))},this._subscribeChannels=function(){var b=this;angular.forEach(this._channel_names,function(c){b._service.subscribe(c),a.info("[push] Subscribed to channel <"+c+">")})},this.bind=function(a,b,c){if(!this._service.allChannels().hasOwnProperty(a))throw"Not subscribed to this channel, name = <"+a+">";this._service.channel(a).bind(b,c)},this.bindFrameReceived=function(a){this.bind(this.LEOP_DOWNLINK_CHANNEL,this.FRAME_EVENT,a,this)},this._initData()}]),angular.module("GroundStationModels",["broadcaster","pushServices","satnetServices","snMarkerServices"]).service("gsModels",["$rootScope","$q","broadcaster","satnetRPC","markers",function(a,b,c,d,e){this.initAll=function(){var a=this;return d.rCall("gs.list",[]).then(function(b){return a._initAll(b)})},this.initAllLEOP=function(a){var c=this,e=[];return d.rCall("leop.gs.list",[a]).then(function(a){return angular.forEach(a.leop_gs_inuse,function(a){e.push(c.addGS(a))}),angular.forEach(a.leop_gs_available,function(a){e.push(c.addUnconnectedGS(a))}),b.all(e).then(function(a){var b=[];return angular.forEach(a,function(a){b.push(a)}),b})})},this._initAll=function(a){var c=this,d=[];return angular.forEach(a,function(a){d.push(c.addGS(a))}),b.all(d).then(function(a){var b=[];return angular.forEach(a,function(a){b.push(a)}),b})},this.addGS=function(a){return d.rCall("gs.get",[a]).then(function(a){return e.createGSMarker(a)})},this.addUnconnectedGS=function(a){return d.rCall("gs.get",[a]).then(function(a){return e.createUnconnectedGSMarker(a)})},this.connectGS=function(a){e.createGSConnector(a)},this.disconnectGS=function(a){e.removeGSConnector(a)},this.updateGS=function(a){d.rCall("gs.get",[a]).then(function(a){return e.updateGSMarker(a)})},this.removeGS=function(a){return e.removeGSMarker(a)},this.initListeners=function(){var b=this;a.$on(c.GS_ADDED_EVENT,function(a,c){console.log("@on-gs-added-event, event = "+a+", id = "+c),b.addGS(c)}),a.$on(c.GS_REMOVED_EVENT,function(a,c){console.log("@on-gs-removed-event, event = "+a+", id = "+c),b.removeGS(c)}),a.$on(c.GS_UPDATED_EVENT,function(a,c){console.log("@on-gs-updated-event, event = "+a+", id = "+c),b.updateGS(c)}),a.$on(c.LEOP_GS_ASSIGNED_EVENT,function(a,c){console.log("@on-gs-assigned-event, event = "+a+", id = "+c),b.connectGS(c)}),a.$on(c.LEOP_GS_RELEASED_EVENT,function(a,c){console.log("@on-gs-released-event, event = "+a+", id = "+c),b.disconnectGS(c)}),a.$on(c.GS_AVAILABLE_ADDED_EVENT,function(a,c){console.log("@on-gs-added-event, event = "+a+", id = "+c),b.addUnconnectedGS(c)}),a.$on(c.GS_AVAILABLE_REMOVED_EVENT,function(a,c){console.log("@on-gs-removed-event, event = "+a+", id = "+c),b.removeGS(c)}),a.$on(c.GS_AVAILABLE_UPDATED_EVENT,function(a,c){console.log("@on-gs-updated-event, event = "+a+", id = "+c),b.updateGS(c)})}}]),angular.module("snMarkerServices",["snMapServices"]),angular.module("snMarkerServices").constant("_RATE",1).constant("_SIM_DAYS",1).constant("_GEOLINE_STEPS",1).service("markers",["$log","mapServices","LAT","LNG","ZOOM","_SIM_DAYS","_GEOLINE_STEPS",function(a,b,c,d,e,f,g){this._mapInfo={},this._mapScope=null,this.getScope=function(){if(null===this._mapScope)throw"<_mapScope> has not been set.";return this._mapScope},this.configureMapScope=function(f){this._mapScope=f,angular.extend(this._mapScope,{center:{lat:c,lng:d,zoom:e},layers:{baselayers:{},overlays:{}},markers:{},paths:{},maxbounds:{}}),angular.extend(this._mapScope.layers.baselayers,b.getBaseLayers()),angular.extend(this._mapScope.layers.overlays,b.getOverlays()),angular.extend(this._mapScope.layers.overlays,this.getOverlays());var g=this._mapInfo;b.createTerminatorMap(!0).then(function(c){return a.log("[map-controller] Created map = <"+b.asString(c)+">"),angular.extend(g,c),g})},this._KEY_HEADER="MK",this._key_number=0,this._ids2keys={},this.createMarkerKey=function(a){if(void 0!==this._ids2keys[a])return this.getMarkerKey(a);var b=this._KEY_HEADER+this._key_number;return this._key_number+=1,this._ids2keys[a]=b,b},this.getMarkerKey=function(a){if(this._ids2keys.hasOwnProperty(a)===!1)throw"@getMarkerKey: No key for <"+a+">";return this._ids2keys[a]},this.getServerMarker=function(a){if(null===this._serverMarkerKey)throw"@getServerMarker: no server defined for <"+a+">";return this.getScope().markers[this._serverMarkerKey]},this.getMarker=function(a){return this.getScope().markers[this.getMarkerKey(a)]},this.getOverlays=function(){return{network:{name:"Network",type:"markercluster",visible:!0},groundstations:{name:"Ground Stations",type:"markercluster",visible:!0}}},this.panTo=function(a){if(!a)throw"@panTo: no LatLng object provided";return b.getMainMap().then(function(b){return b.map.panTo(a,{animate:!0}),a})},this._serverMarkerKey=null,this.createServerMarker=function(a,b,c){return this._serverMarkerKey=this.createMarkerKey(a),console.log("ZZZZZ@@@@111, smk = "+this._serverMarkerKey),this.getScope().markers[this._serverMarkerKey]={lat:b,lng:c,focus:!0,draggable:!1,icon:{iconUrl:"/images/gs-icon.svg",iconSize:[15,15]},label:{message:a,options:{noHide:!0}},groundstations:[],identifier:a},console.log("ZZZZZ, createServerMarker, id = "+a),a},this.createConnectorIdentifier=function(a){if(!a)throw"No identifier provided";var b=this.getServerMarker(a);return console.log("server_marker = "+JSON.stringify(b)),console.log("server_marker.id = "+b.identifier),"connect:"+a+"_2_"+b.identifier},this.createGSConnector=function(a){if(!a)throw"@createGSConnector: no GS identifier provided";var b,c=this.getServerMarker(a),d=this.getMarker(a),e=this.createConnectorIdentifier(a),f={};return b=this.createMarkerKey(e),f[b]={color:"gray",type:"polyline",weight:3,opacity:.25,latlngs:[c,d],identifier:e},angular.extend(this.getScope().paths,f),e},this.panToGSMarker=function(a){if(!a)throw"@panToGSMarker: no GS identifier provided";var b=this.getMarker(a),c=new L.LatLng(b.lat,b.lng);return this.panTo(c)},this.createUnconnectedGSMarker=function(a){var b=a.groundstation_id,c=this.createMarkerKey(b);return console.log("gsmk = "+c),this.getScope().markers[c]={lat:a.groundstation_latlon[0],lng:a.groundstation_latlon[1],focus:!0,draggable:!1,icon:{iconUrl:"/images/gs-icon.svg",iconSize:[15,15]},label:{message:a.groundstation_id,options:{noHide:!0}},identifier:b},b},this.createGSMarker=function(a){console.log("XXXXX@@@@@1111");var b=a.groundstation_id;return console.log("XXXXX@@@@@2222"),this.createUnconnectedGSMarker(a),console.log("XXXXX@@@@@3333"),this.createGSConnector(b),console.log("XXXXX@@@@@4444"),b},this.updateGSMarker=function(a){if(null===a)throw"@updateGSMarker, wrong <cfg>";var b=a.groundstation_latlon[0],c=a.groundstation_latlon[1],d=this.getMarker(a.groundstation_id);return d.lat!==b&&(d.lat=b),d.lng!==c&&(d.lng=c),a.groundstation_id},this.removeGSConnector=function(a){var b=this.getMarkerKey(this.createConnectorIdentifier(a));this.getScope().paths.hasOwnProperty(b)&&delete this.getScope().paths[b]},this.removeGSMarker=function(a){var b=this.getMarkerKey(a);delete this.getScope().markers[b],this.removeGSConnector(a)},this.sc={},this.scLayers=L.layerGroup(),this.trackLayers=L.layerGroup(),this.scStyle={autostart:!0,draggable:!1,icon:L.icon({iconUrl:"/images/sc-icon.svg",iconSize:[15,15]})},this.trackStyle={weight:1,opacity:.725,steps:g},this.colors=["#00ABAF","#74FF60","#499F3C","#2C6024"],this.color_n=0,this.panToSCMarker=function(a){if(!a)throw"@panToGSMarker: no SC identifier provided";var b=this.sc[a],c=b.marker.getLatLng();return this.panTo(c)},this.readTrack=function(a){var b,c,d=[],e=[],g=[],h=!0,i=!1,j=1e3*Date.now(),k=1e3*moment().add(f,"days").toDate().getTime();if(null===a||0===a.length)throw"@readTrack: empty groundtrack";for(b=0;b<a.length;b+=1)if(c=a[b],!(c.timestamp<j)){if(c.timestamp>k)break;d.push([c.latitude,c.longitude]),g.push(new L.LatLng(c.latitude,c.longitude)),h!==!0?(e.push((c.timestamp-a[b-1].timestamp)/1e3),i=!0):h=!1}if(i===!1)throw"@readTrack: invalid groundtrack";return{durations:e,positions:d,geopoints:g}},this.createSCMarkers=function(a){if(!a||!Object.keys(a).length)throw"@createSCMarkers: wrong cfg, no <spacecraft_id>";var b,c=a.spacecraft_id,d=this.scStyle,e=this.colors[this.color_n%this.colors.length];return this.color_n+=1,this.trackStyle.color=e,b=this.readTrack(a.groundtrack),{marker:L.Marker.movingMarker(b.positions,b.durations,d).bindLabel(c,{noHide:!0}),track:L.geodesic([b.geopoints],this.trackStyle)}},this.addSC=function(a,c){if(!a)throw"@addSC: wrong id";if(this.sc.hasOwnProperty(a))throw"@addSC: SC Marker already exists, id = "+a;var d=this.createSCMarkers(c);return this.sc[a]=d,this.scLayers.addLayer(d.marker),this.trackLayers.addLayer(d.track),b.getMainMap().then(function(b){return d.track.addTo(b.map),d.marker.addTo(b.map),a})},this.updateSC=function(b,c){if(!b)throw"@removeSC: no id provided";if(!this.sc.hasOwnProperty(b))throw"@updateSC: marker <"+b+"> does not exist";var d=this;return this.removeSC(b).then(function(e){a.log("@updateSC: marker <"+e+"> removed"),d.addSC(b,c).then(function(b){a.log("@updateSC: marker <"+b+"> added")})}),b},this.removeSC=function(a){if(!a)throw"@removeSC: no id provided";if(!this.sc.hasOwnProperty(a))throw"@removeSC: marker <"+a+"> does not exist";var c=this.sc[a];return this.scLayers.removeLayer(c.marker),this.trackLayers.removeLayer(c.track),delete this.sc[a],b.getMainMap().then(function(b){return b.map.removeLayer(c.marker),b.map.removeLayer(c.track),a})}}]),angular.module("snNetworkModels",["satnetServices","snMarkerServices"]).service("serverModels",["$rootScope","$location","broadcaster","satnetRPC","markers",function(a,b,c,d,e){this._initListeners=function(){a.$on(c.KEEP_ALIVE_EVENT,function(a,b){console.log("ev = "+a+", msg = "+b),d.alive().then(function(a){console.log("alive! data = "+JSON.stringify(a))})})},this.initStandalone=function(){this._initListeners();var a=b.host();return d.getServerLocation(a).then(function(b){return e.createServerMarker(a,b.latitude,b.longitude)})}}]),angular.module("gsControllers",["ngMaterial","remoteValidation","leaflet-directive","snMapServices"]).controller("GsListCtrl",["$log","$scope","$mdDialog","$mdToast","satnetRPC",function(a,b,c,d,e){b.gsList=[],b.addGsMenu=function(){c.show({templateUrl:"operations/templates/gs/add-dialog.html"})},b.editGs=function(a){c.show({templateUrl:"operations/templates/gs/edit-dialog.html",locals:{gs_id:a}})},b.removeGs=function(f){e.rCall("gs.delete",[f]).then(function(c){var e="<"+f+"> succesfully deleted!";a.info(e,", result = "+JSON.stringify(c)),d.show(d.simple().content(e)),b.refresh()})["catch"](function(b){var e="Could not remove GS with id = <"+f+">";a.error("[satnet] ERROR, cause = "+JSON.stringify(b)),d.show(d.simple().content(e)),c.hide()})},b.refresh=function(){e.rCall("gs.list",[]).then(function(a){null!==a&&(b.gsList=a.slice(0))})["catch"](function(b){a.error("[satnet] ERROR, cause = "+JSON.stringify(b)),d.show(d.simple().content("Network Error")),c.hide()})},b.init=function(){b.refresh()}}]).controller("GsAddCtrl",["$log","$scope","$mdDialog","$mdToast","satnetRPC","mapServices","LAT","LNG","ZOOM_SELECT",function(a,b,c,d,e,f,g,h,i){b.configuration={identifier:"",callsign:"",elevation:0},b.uiCtrl={add:{disabled:!0}},b.center={},b.markers={gs:{lat:0,lng:0,message:"Drag me to your GS!",draggable:!0,focus:!1}},b.events={},b.add=function(){var f=[b.configuration.identifier,b.configuration.callsign,b.configuration.elevation.toFixed(2),b.markers.gs.lat.toFixed(6),b.markers.gs.lng.toFixed(6)];e.rCall("gs.add",f).then(function(b){var e=b.groundstation_id,f="<"+e+"> succesfully created!";a.info(f,", result = "+JSON.stringify(b)),d.show(d.simple().content(f)),c.hide(),c.show({templateUrl:"operations/templates/gs/list-dialog.html"})},function(a){window.alert(a)})},b.cancel=function(){c.hide(),c.show({templateUrl:"operations/templates/gs/list-dialog.html"})},b.init=function(){e.getUserLocation().then(function(a){angular.extend(b.center,{lat:a.latitude,lng:a.longitude,zoom:i}),b.markers.gs.lat=a.latitude,b.markers.gs.lng=a.longitude,b.markers.gs.focus=!0,angular.extend(b.events,{markers:["dragend"]})}),b.$on("leafletDirectiveMarker.dragend",function(a,c){b.markers.gs.lat=c.model.lat,b.markers.gs.lng=c.model.lng})}}]);var opsMenuCtrlModule=angular.module("operationsMenuControllers",["ngMaterial"]);opsMenuCtrlModule.controller("OperationsMenuCtrl",["$scope","$mdSidenav","$mdDialog",function(a,b,c){a.close=function(){b("menu").close()},a.showGsMenu=function(){c.show({templateUrl:"operations/templates/gs/list-dialog.html"})}}]),angular.module("operationsDirective",["ngMaterial","ngAnimate","leaflet-directive","splashDirective","snAboutDirective","snMapDirective","operationsMenuControllers","gsControllers"]).config(function(a){a.theme("default").primaryPalette("blue-grey").accentPalette("grey")}).controller("OperationsAppCtrl",function(a,b){a.toggleMenu=function(){b("menu").toggle()}}).directive("operationsApp",function(){return{restrict:"E",templateUrl:"operations/templates/operations-app.html"}});