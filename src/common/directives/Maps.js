/**
 * Copyright 2015 Ricardo Tubio-Pardavila
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Created by rtubio on 15/05/15.
 */

angular.module('snMapDirective', ['leaflet-directive', 'snMapServices'])
    .controller('SelectMapCtrl', [
        '$scope', 'leafletData', 'leafletEvents', 'ZOOM_SELECT',

        /**
         * Main controller for the map used by the user to pick a given
         * location. The main usage of this map within the SatNet system will
         * be enabling the users in placing their ground segments.
         * 
         * @param {Object} $scope        $scope for the controller.
         * @param {Object} leafletData   Object with direct Leaflet access.
         * @param {Object} leafletEvents Object with direct Leaflet events
         *                               access.
         * @param {Number} ZOOM_SELECT   Default zoom level for the select map.
         */
        function($scope, leafletData, leafletEvents, ZOOM_SELECT) {

            $scope.center = {
                autoDiscover: true,
                zoom: ZOOM_SELECT
            };
            $scope.markers = {
                gs: {
                    lat: $scope.center.lat,
                    lng: $scope.center.lng,
                    focus: true,
                    draggable: false,
                    icon: {
                        iconUrl: '/images/user.png',
                        iconSize: [15, 15]
                    },
                    label: {
                        message: 'Drag me!',
                        options: {
                            noHide: true
                        }
                    }
                }
            };

        }

    ])
    .controller('MapCtrl', [
        '$log', '$scope',
        'mapServices',
        'leafletData', 'leafletEvents',
        'ZOOM',

        /**
         * Main controller for the map directive. It should be in charge of all
         * the additional controls and/or objects that are overlayed over the
         * original map. The main control of the map should be written in
         * re-usable functions within the 'mapServices' object.
         *
         * @param {Object} $scope      $scope for the controller.
         * @param {Object} mapServices Service with the custom functions to
         *                             control the maps object.
         */
        function ($log, $scope, mapServices, leafletData, leafletEvents, ZOOM) {

            $scope.center = {
                zoom: ZOOM
            };
            $scope.markers = {};
            $scope.layers = {
                baselayers: {},
                overlays: {}
            };
            $scope.events = {
                map: {
                    enable: ['click'],
                    logic: 'emit'
                }
            };
            $scope.lastEvent = '';

            /**
             * Function that register a set of handlers to the required map
             * events.
             */
            $scope.registerMapEvents = function () {
                $scope.$on('leafletDirectiveMap.click', function (name) {
                    $scope.lastEvent = name;
                    console.log('CLICK ON THE MAP!');
                });
            };

            /**
             * Function that handles the initialization of the map:
             * 1) first, a map with the animated terminator is created;
             * 2) later, the just created map is centered at the estimated
             *      location for the user's IP address;
             * 3) finally, the events generated by the map are linked to the
             *    required callbacks that will handle them.
             */
            $scope.init = function () {
                $scope.map = mapServices.createTerminatorMap(true);
                mapServices.autocenterMap($scope, ZOOM);
                $scope.registerMapEvents();
            };

        }
    ])
    .directive('selectMap',
        function () {
            return {
                restrict: 'E',
                templateUrl: 'common/templates/select-map.html'
            };
        }
    )
    .directive('snMap',

        /**
         * Function that creates the directive itself returning the object
         * required by Angular.
         *
         * @returns {Object} Object directive required by Angular, with
         *                   restrict and templateUrl.
         */
        function () {
            return {
                restrict: 'E',
                templateUrl: 'common/templates/sn-map.html'
            };
        }

    );